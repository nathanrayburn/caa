

# This file was *autogenerated* from the file chal.sage
from sage.all_cmdline import *   # import sage library

_sage_const_10 = Integer(10); _sage_const_64 = Integer(64); _sage_const_17612245458813196901 = Integer(17612245458813196901); _sage_const_16061925794087304359 = Integer(16061925794087304359); _sage_const_3444278253034665517 = Integer(3444278253034665517); _sage_const_6871315336358637160 = Integer(6871315336358637160); _sage_const_11861014588192027226 = Integer(11861014588192027226); _sage_const_14150311099047293307 = Integer(14150311099047293307); _sage_const_2402653507838990272 = Integer(2402653507838990272); _sage_const_303170884658933280 = Integer(303170884658933280); _sage_const_794601646948892672 = Integer(794601646948892672); _sage_const_17145919552714930582 = Integer(17145919552714930582); _sage_const_13309774665470604164 = Integer(13309774665470604164); _sage_const_12698334331143983436 = Integer(12698334331143983436); _sage_const_13651509895043033813 = Integer(13651509895043033813); _sage_const_11793545420017986825 = Integer(11793545420017986825); _sage_const_16931419170946022363 = Integer(16931419170946022363); _sage_const_11577968954367590970 = Integer(11577968954367590970); _sage_const_12254344053005718638 = Integer(12254344053005718638); _sage_const_9639075804468246787 = Integer(9639075804468246787); _sage_const_7648734507154237436 = Integer(7648734507154237436); _sage_const_2169039299899362595 = Integer(2169039299899362595); _sage_const_16228228033180123918 = Integer(16228228033180123918); _sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)# Set up parameters
DEGREE = _sage_const_10   # Degree of the polynomial
BITSIZE = _sage_const_64   # Bit size of the prime
p = _sage_const_17612245458813196901   # Example prime modulus
points = [
    (_sage_const_16061925794087304359 , _sage_const_3444278253034665517 ),
    (_sage_const_6871315336358637160 , _sage_const_11861014588192027226 ),
    (_sage_const_14150311099047293307 , _sage_const_2402653507838990272 ),
    (_sage_const_303170884658933280 , _sage_const_794601646948892672 ),
    (_sage_const_17145919552714930582 , _sage_const_13309774665470604164 ),
    (_sage_const_12698334331143983436 , _sage_const_13651509895043033813 ),
    (_sage_const_11793545420017986825 , _sage_const_16931419170946022363 ),
    (_sage_const_11577968954367590970 , _sage_const_12254344053005718638 ),
    (_sage_const_9639075804468246787 , _sage_const_7648734507154237436 ),
    (_sage_const_2169039299899362595 , _sage_const_16228228033180123918 )
]  # Provided points

# Sage code to set up the matrix, similar to the signature approach

nbCols = DEGREE + _sage_const_2 
nbRows = nbCols
Aspace = MatrixSpace(QQ, nbRows, nbCols)

A = copy(Aspace.identity_matrix())

print(A)

A = A*p
B = p // pow(_sage_const_2 ,_sage_const_16 )

A[ - _sage_const_2 ,  - _sage_const_2 ] = B / p
A[ - _sage_const_1 ,  - _sage_const_1 ] = B

# Fill matrix A with polynomial terms and moduli
for i, (x_i, y_i) in enumerate(points):
    for d in range(DEGREE + _sage_const_1 ):
        A[i, d] = x_i**d  # Fill polynomial terms

    A[i, -_sage_const_2 ] = -p  # Adjust modulus column
    A[i, -_sage_const_1 ] = y_i  # Offset by y_i, as with signatures


M = A.LLL()

for v in M:
    print(v)
    if v[-_sage_const_1 ] == B:
        c0 = int(v[_sage_const_0 ])  # The constant term, representing the secret
        print("Recovered constant term (secret):", c0)
        break

