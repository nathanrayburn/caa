

# This file was *autogenerated* from the file crack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_115792089237316195423570985008687907852837564279074904382605163141518161494337 = Integer(115792089237316195423570985008687907852837564279074904382605163141518161494337); _sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_256 = Integer(256)
import hashlib
def LLL(B):
    message = b"ecdsa.c"
    h = hashlib.sha256(message).hexdigest()
    n = _sage_const_115792089237316195423570985008687907852837564279074904382605163141518161494337 

    with open("message.txt", "r") as file:
        lines = [int(line.strip(), _sage_const_16 ) for line in file]
    signatures = [(lines[i], lines[i+_sage_const_1 ]) for i in range(_sage_const_0 , len(lines), _sage_const_2 )]

    length = len(signatures) + _sage_const_2 
    M = MatrixSpace(QQ, length, length)
    A = copy(M.identity_matrix())

    for x in range(length - _sage_const_2 ):
        ti = (signatures[x][_sage_const_0 ] / signatures[x][_sage_const_1 ]) % n
        ai = (-(int(h, _sage_const_16 ) / signatures[x][_sage_const_1 ])) % n

        A[x, x] = n
        A[length - _sage_const_1 , x] = ai
        A[length - _sage_const_2 , x] = ti

    A[length - _sage_const_1 , length - _sage_const_1 ] = B
    A[length - _sage_const_2 , length - _sage_const_2 ] = B / n

    # Apply LLL
    R = A.LLL()

    # Calculate the private key from the LLL result
    for row in R:
        print("Row:", row)  # Debugging line to see the rows in R
        if row[-_sage_const_1 ] == B:
            a = ZZ((-row[-_sage_const_2 ] * n / B) % n)
            print("Value of a:", a)
            print("Value of -a mod n:", (-a) % n)
            return a, (-a) % n  # Return both values

    # If no valid row is found, return None, None
    print("No valid row found with row[-1] == B")
    return None, None

# Main loop
for i in range(_sage_const_2 , _sage_const_256 ):
    print("Iteration:", i) 
    a, inv_a = LLL(pow(_sage_const_2 , i))
    
    # Skip iteration if LLL returned None
    if a is None or inv_a is None:
        print("Skipping iteration due to None return")
        continue
    
    if key == a or key == inv_a:
        print("Found boundary")
        break


